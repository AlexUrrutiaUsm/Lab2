// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/interaccion.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LcpService_ConsultarTorneosDisponibles_FullMethodName = "/interaccion.LcpService/ConsultarTorneosDisponibles"
	LcpService_InscribirseEnTorneo_FullMethodName         = "/interaccion.LcpService/InscribirseEnTorneo"
	LcpService_AsignarCombate_FullMethodName              = "/interaccion.LcpService/AsignarCombate"
)

// LcpServiceClient is the client API for LcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LcpServiceClient interface {
	ConsultarTorneosDisponibles(ctx context.Context, in *TorneosDisponiblesRequest, opts ...grpc.CallOption) (*TorneosDisponiblesResponse, error)
	InscribirseEnTorneo(ctx context.Context, in *InscripcionRequest, opts ...grpc.CallOption) (*InscripcionResponse, error)
	AsignarCombate(ctx context.Context, in *AsignacionCombateRequest, opts ...grpc.CallOption) (*AsignacionCombateResponse, error)
}

type lcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLcpServiceClient(cc grpc.ClientConnInterface) LcpServiceClient {
	return &lcpServiceClient{cc}
}

func (c *lcpServiceClient) ConsultarTorneosDisponibles(ctx context.Context, in *TorneosDisponiblesRequest, opts ...grpc.CallOption) (*TorneosDisponiblesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TorneosDisponiblesResponse)
	err := c.cc.Invoke(ctx, LcpService_ConsultarTorneosDisponibles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcpServiceClient) InscribirseEnTorneo(ctx context.Context, in *InscripcionRequest, opts ...grpc.CallOption) (*InscripcionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InscripcionResponse)
	err := c.cc.Invoke(ctx, LcpService_InscribirseEnTorneo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcpServiceClient) AsignarCombate(ctx context.Context, in *AsignacionCombateRequest, opts ...grpc.CallOption) (*AsignacionCombateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsignacionCombateResponse)
	err := c.cc.Invoke(ctx, LcpService_AsignarCombate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LcpServiceServer is the server API for LcpService service.
// All implementations must embed UnimplementedLcpServiceServer
// for forward compatibility.
type LcpServiceServer interface {
	ConsultarTorneosDisponibles(context.Context, *TorneosDisponiblesRequest) (*TorneosDisponiblesResponse, error)
	InscribirseEnTorneo(context.Context, *InscripcionRequest) (*InscripcionResponse, error)
	AsignarCombate(context.Context, *AsignacionCombateRequest) (*AsignacionCombateResponse, error)
	mustEmbedUnimplementedLcpServiceServer()
}

// UnimplementedLcpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLcpServiceServer struct{}

func (UnimplementedLcpServiceServer) ConsultarTorneosDisponibles(context.Context, *TorneosDisponiblesRequest) (*TorneosDisponiblesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarTorneosDisponibles not implemented")
}
func (UnimplementedLcpServiceServer) InscribirseEnTorneo(context.Context, *InscripcionRequest) (*InscripcionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InscribirseEnTorneo not implemented")
}
func (UnimplementedLcpServiceServer) AsignarCombate(context.Context, *AsignacionCombateRequest) (*AsignacionCombateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsignarCombate not implemented")
}
func (UnimplementedLcpServiceServer) mustEmbedUnimplementedLcpServiceServer() {}
func (UnimplementedLcpServiceServer) testEmbeddedByValue()                    {}

// UnsafeLcpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LcpServiceServer will
// result in compilation errors.
type UnsafeLcpServiceServer interface {
	mustEmbedUnimplementedLcpServiceServer()
}

func RegisterLcpServiceServer(s grpc.ServiceRegistrar, srv LcpServiceServer) {
	// If the following call pancis, it indicates UnimplementedLcpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LcpService_ServiceDesc, srv)
}

func _LcpService_ConsultarTorneosDisponibles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorneosDisponiblesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcpServiceServer).ConsultarTorneosDisponibles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LcpService_ConsultarTorneosDisponibles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcpServiceServer).ConsultarTorneosDisponibles(ctx, req.(*TorneosDisponiblesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcpService_InscribirseEnTorneo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InscripcionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcpServiceServer).InscribirseEnTorneo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LcpService_InscribirseEnTorneo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcpServiceServer).InscribirseEnTorneo(ctx, req.(*InscripcionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcpService_AsignarCombate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsignacionCombateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcpServiceServer).AsignarCombate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LcpService_AsignarCombate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcpServiceServer).AsignarCombate(ctx, req.(*AsignacionCombateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LcpService_ServiceDesc is the grpc.ServiceDesc for LcpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LcpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaccion.LcpService",
	HandlerType: (*LcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarTorneosDisponibles",
			Handler:    _LcpService_ConsultarTorneosDisponibles_Handler,
		},
		{
			MethodName: "InscribirseEnTorneo",
			Handler:    _LcpService_InscribirseEnTorneo_Handler,
		},
		{
			MethodName: "AsignarCombate",
			Handler:    _LcpService_AsignarCombate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/interaccion.proto",
}
